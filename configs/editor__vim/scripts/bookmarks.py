#!/usr/bin/env python3
import argparse
import fnmatch
import os
import signal
import sys
import yaml

from colorterm import formatter


def handler(signum, frame):
    print('')
    print('User interrupt with signal {}. Exiting..'.format(signum))
    sys.exit(0)


signal.signal(signal.SIGINT, handler)
signal.signal(signal.SIGTERM, handler)


def main():
    parser = argparse.ArgumentParser(description='''\
        Convert vim bookmark entries to human readable markdown file.
        The vim bookmark files has to be generated by the
        MattesGroeger/vim-bookmarks plugin. The tool could be useful for code
        reviews and for bookmark summaries.''')
    parser.add_argument(
            '-d',
            dest='delete',
            action='store_true',
            help=formatter(
                'clean up the generated {bold}.vim-bookmarks{reset} files'))
    parser.add_argument(
            '-o',
            dest='oname',
            default='bookmarks.md',
            help=formatter(
                'output file name, default is {bold}bookmarks.md{reset}'))
    parser.add_argument(
            '-t',
            dest='title',
            default='Bookmarks',
            help=formatter(
                'Title of the document, default is {bold}Bookmarks{reset}'))
    args = parser.parse_args()

    files = []
    for root, dirnames, filenames in os.walk('.'):
        for filename in fnmatch.filter(filenames, '.vim-bookmarks'):
            files.append(os.path.join(root, filename))
    if not files:
        print('No .vim-bookmarks files were found. Nothing to do..')
        sys.exit(1)

    if args.delete:
        print('Bookmarks files:')
        for filepath in files:
            print(filepath)
        try:
            delete_files = input('Do you want to delete all bookmark files recursively? [y/N] ')
        except SyntaxError:
            delete_files = 'n'
        if delete_files in ['y', 'yes', 'Y', 'YES', 'Yes']:
            for filepath in files:
                os.remove(filepath)
                print('{} removed'.format(filepath))
            print('Done')
        else:
            print('Aborted..')
        sys.exit(0)

    output = []
    for file in files:
        with open(file) as f:
            lines = f.readlines()
        data = yaml.safe_load(lines[1][lines[1].index('{'):])
        cwd = os.getcwd()
        output.append('# {}'.format(args.title))
        try:
            for main_key in data:
                for path in data[main_key]:
                    print('Processing bookmarks for: {} '.format(path), end='')
                    output.append('')
                    output.append('### {}'.format(path[len(cwd):]))
                    output.append('')
                    output.append('|@|Current content of line|Comment|')
                    output.append('|:--:|:---|:---|')
                    bookmarks = sorted(data[main_key][path], key=lambda i: i['line_nr'])
                    for bookmark in bookmarks:
                        output.append('|{}|`{}`|{}|'.format(
                            bookmark['line_nr'],
                            bookmark['content'],
                            bookmark['annotation'] if 'annotation' in bookmark else '_no comment_'
                        ))
                        print('.', end='')
                    print('')
        except Exception as e:
            print('Unsupported bookmarks format..')
            print(e)
            sys.exit(1)
    with open(args.oname, 'w+') as f:
        for line in output:
            f.write(line + '\n')
    print('{} markdown file was written!'.format(args.oname))


if __name__ == '__main__':
    main()
