#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* Core Setup
** Basic Stuff
*** Better Defaults
Hello, this is ok
#+BEGIN_SRC emacs-lisp
;; (use-package better-defaults :ensure t)
;; (setq visible-bell nil)
#+END_SRC

*** Splash Screen
Remove splash screen and use *scratch* instead as the home buffer.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC

*** Line Numbers
Switch line numbers on by default in all buffers
#+BEGIN_SRC emacs-lisp
;; (global-linum-mode 1)
#+END_SRC

*** Menu Bar
Switch the Menubar off by default (I like to keep everything clean)
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

*** Scroll Bar
Remove Scroll Bars
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

*** Tool Bar
Remove Tool Bars
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

*** Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** New Line indent
New lines auto indents
#+BEGIN_SRC emacs-lisp
;; (define-key global-map (kbd "RET")
;;   'newline-and-indent)
#+END_SRC

*** Tool Tips
Tool Tips in echo area
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq tooltip-use-echo-area t)
#+END_SRC

*** Org mode code block auto indent
There is a strange indentation issue that is happening inside the code
blocks. If you hit an enter the already entered lines will be indented
by one level. This could be quite annoying. The following config
solves it:
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-preserve-indentation t)
(setq make-backup-files nil)
#+end_src

*** Scroll handling
Scrolling in emacs is very jittery by default as it works in a paging
mode by default. The following settings solves this issue:
#+begin_src emacs-lisp
(setq scroll-step 1
      scroll-conservatively 101
      scroll-margin 3
      scroll-preserve-screen-position 't)
#+end_src

*** Which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode 1)
  )
#+end_src

*** Fill column
Automatic line wrapping:
#+begin_src emacs-lisp
(setq-default fill-column 82)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

*** Basic stuff
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
(use-package ranger
  :ensure t
  :config
)
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '(
    (recents  . 5)
    (projects . 5)
    (agenda . 5)
  ))
)
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 110
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Themes
*** Install Themes from Repos
List of themes to install
#+BEGIN_SRC emacs-lisp
(use-package darkokai-theme
  :ensure t
  :defer t)
(use-package spacemacs-theme
  :ensure t
  :defer t)
#+END_SRC

*** Load Current default theme
#+BEGIN_SRC emacs-lisp
(load-theme 'spacemacs-dark t)
#+END_SRC

** Evil mode
Install EVIL (if not yet installed), and enable it.

#+BEGIN_SRC emacs-lisp
;; Evil Mode
(use-package evil
  :ensure t
  :config

  (evil-mode 1)
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode t)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "w" 'save-buffer
      "e" 'ranger
    ) 
  )

  (use-package evil-surround
    :ensure t
    :config (global-evil-surround-mode))

  (use-package evil-indent-plus
    :ensure t)

;;  (use-package evil-org
;;    :ensure t
;;    :config
;;    (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))
;;    (add-hook 'org-mode-hook (lambda () (evil-org-mode))))

  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
    (key-chord-define evil-visual-state-map "jk" 'evil-normal-state)
    )

  (define-key evil-motion-state-map ";" 'evil-ex)

  (use-package powerline-evil
    :ensure t
    :config
    (powerline-evil-vim-theme)
    )

  ;; Configure the global redo system..
  (use-package undo-tree
    :ensure t
    :config
    (setq evil-undo-system 'undo-tree)
    )
  ;; (setq evil-undo-system 'undo-redo)
  ;; (setq evil-want-fine-undo t) 
)
#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    ;; Make sure org file code highlights correctly
    (setq org-src-fontify-natively t)
  
    (use-package org-tempo)
  
    (setq org-adapt-indentation nil)
  
    (evil-leader/set-key-for-mode 'org-mode
      "m ," 'org-ctrl-c-ctrl-c
  
      "m c i" 'org-clock-in
      "m c o" 'org-clock-out
      "m c g" 'org-clock-jump-to-current-clock
      "m c d" 'org-clock-display
  
      "m t" 'org-set-tags-command
      "m s" 'org-schedule
    )
  
    (org-babel-do-load-languages 'org-babel-load-languages
      '(
        (shell . t)
        (python .t)
      ))
  
    )
#+END_SRC

Htmlize to export my org files to web pages:
#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t)
#+END_SRC

Add org-clock times into a ~:LOGBOOK:~ drawer.
#+BEGIN_SRC emacs-lisp
(setq org-clock-into-drawer t)
#+END_SRC

Turn on indent mode on startup.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

Org Agenda open in current window
#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup 'current-window)
#+END_SRC

