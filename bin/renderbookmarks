#!/usr/bin/env python
from __future__ import print_function
import glob
import yaml
import os
import sys
import argparse

def main():
    parser = argparse.ArgumentParser(description='''\
        Convert vim bookmark entries to human readable markdown file.
        The vim bookmark files has to be generated by the MattesGroeger/vim-bookmarks plugin.
        The tool could be useful for code reviews and for bookmark summaries.
    ''')
    parser.add_argument('-t', dest='title', default='Bookmars',     help='title of the generated markdown file, default is "Bookmarks"')
    parser.add_argument('-o', dest='oname', default='bookmarks.md', help='output file name, default is "bookmarks.md"')
    args = parser.parse_args()

    files = glob.glob('.vim-bookmarks')
    if not files:
        print('No .vim-bookmarks files were found. Nothing to do..')
        sys.exit(1)
    for file in files:
        with open(file) as f:
            lines = f.readlines()
        data = yaml.safe_load(lines[1][lines[1].index('{'):])
        cwd = os.getcwd()
        output = []
        output.append('# {}'.format(args.title))
        try:
            for main_key in data:
                for path in data[main_key]:
                    print('Processing bookmarks for: {} '.format(path), end='')
                    output.append('')
                    output.append('### {}'.format(path[len(cwd):]))
                    output.append('')
                    output.append('|@|Current content of line|Comment|')
                    output.append('|:--:|:---|:---|')
                    for bookmark in data[main_key][path]:
                        output.append('|{}|`{}`|{}|'.format(
                            bookmark['line_nr'],
                            bookmark['content'],
                            bookmark['annotation'] if 'annotation' in bookmark else '_no comment_'
                        ))
                        print('.', end='')
                    print('')
        except Exception as e:
            print('Unsupported bookmarks format..')
            print(e)
            sys.exit(1)
        with open(args.oname, 'w+') as f:
            for line in output:
                f.write(line + '\n')
        print('{} markdown file was written!'.format(args.oname))


if __name__ == '__main__':
    main()
