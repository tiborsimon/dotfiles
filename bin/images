#!/usr/bin/env bash
# Written by -< Tibor Simon >- as part of the vTAS speedup scripts.
# tibor.simon@nokia.com
# tiborsimon.io
# (c) Tibor Simon 2016-

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CMPATH="/etc/cm-config"

# parsing arguments
if [[ $# = 0 ]]; then
    HELP=true
else
    while [[ $# > 0 ]]
    do
        key="$1"
        case $key in
            up)
                DEPLOY=true
                shift # past argument
                ;;
            halt)
                HALT=true
                shift # past argument
                ;;
            m|memfile)
                if [ "$2" == 's' ] || [ "$2" == 'summon' ]; then
                    MEMFILE_SUMMON=true
                elif [ "$2" == 'p' ] || [ "$2" == 'put' ]; then
                    MEMFILE_PUT=true
                elif [ "$2" == 'ls' ] || [ "$2" == 'list' ]; then
                    MEMFILE_LIST=true
                elif [ "$2" == 'sh' ] || [ "$2" == 'show' ]; then
                    MEMFILE_SHOW=true
                else
                    echo ''
                    echo "${RED}Invalid memfile action. Possible values: summon|s|put|p|list|ls.${RESET}";
                    echo ''
                    exit -1
                fi
                if [ -n "$3" ] || $MEMFILE_LIST || $MEMFILE_SHOW; then
                    MEMFILE_TARGET=$3
                else
                    echo ''
                    echo "${RED}Missing memfile target.${RESET}";
                    echo ''
                    exit -1
                fi
                shift
                shift
                shift
                ;;
            dsl)
                if [ "$2" == 's' ] || [ "$2" == 'summon' ]; then
                    DSL_SUMMON=true
                elif [ "$2" == 'p' ] || [ "$2" == 'put' ]; then
                    DSL_PUT=true
                elif [ "$2" == 'ls' ] || [ "$2" == 'list' ]; then
                    DSL_LIST=true
                else
                    echo ''
                    echo "${RED}Invalid dsl action. Possible values: summon|s|put|p|list|ls.${RESET}";
                    echo ''
                    exit -1
                fi
                if [ -n "$3" ] || $DSL_LIST; then
                    DSL_TARGET=$3
                else
                    echo ''
                    echo "${RED}Missing dsl target.${RESET}";
                    echo ''
                    exit -1
                fi
                shift
                shift
                shift
                ;;
            dat)
                if [ "$2" == 's' ] || [ "$2" == 'summon' ]; then
                    DAT_SUMMON=true
                elif [ "$2" == 'p' ] || [ "$2" == 'put' ]; then
                    DAT_PUT=true
                elif [ "$2" == 'ls' ] || [ "$2" == 'list' ]; then
                    DAT_LIST=true
                else
                    echo ''
                    echo "${RED}Invalid dat action. Possible values: summon|s|put|p|list|ls.${RESET}";
                    echo ''
                    exit -1
                fi
                if [ -n "$3" ] || $DAT_LIST; then
                    DAT_TARGET=$3
                else
                    echo ''
                    echo "${RED}Missing dat target.${RESET}";
                    echo ''
                    exit -1
                fi
                shift
                shift
                shift
                ;;
            help|--help|-h)
                HELP=true
                shift # past argument
                ;;
            *)
                echo ''
                echo "${RED}Invalid parameter configuration. Check out help for more details.${RESET}";
                echo ''
                exit -1
                ;;
        esac
    done
fi

#=========================================================================================================
#  H E L P   H A N D L I N G
if [ -n "$HELP" ]
then
cat <<EOF

  _____ __  __          _____ ______   _______          _
 |_   _|  \\/  |   /\\   / ____|  ____| |__   __|        | |
   | | | \\  / |  /  \\ | |  __| |__       | | ___   ___ | |___
   | | | |\\/| | / /\\ \\| | |_ |  __|      | |/ _ \\ / _ \\| / __|
  _| |_| |  | |/ ____ \\ |__| | |____     | | (_) | (_) | \\__ \\
 |_____|_|  |_/_/    \\_\\_____|______|    |_|\\___/ \\___/|_|___/


    Usage: images [help|-h|--help]
           images rename
           images export <quality> <max-dimmension> <files wildcard>
           images ios-video-time-shift
           images reduce-videos

    cm [help|-h|--help]
        Prints out this help.

    cm rename
        Renames all images in the current directory with the following format:
        yyyymmdd-hhmmss-<incremental number if timestamp is equal>.<extension>

    cm export <quality> <max-dimmension> [files-wildcard] [destination]
        Export the files defined with the <files wildcard> parameter into <destination> in JPEG.
        quality [80] - Quality of the exported JPG images.
        max-dimmension [original] - Max dimmension of the exported images.
        files-wildcard [*] - Files wildcard.
        destination [~/Desktop/export] - Export destination.

    cm ios-video-time-shift [amount]
        Shifts all time related metadata by the specified amount.
        amount [+2] - Shifted amount.

    cm reduce-videos
        Reduces all video files in the current directory.

EOF
    exit 0
fi

if [ -z "$DEPLOY" ]; then
    id=$(enter cm-adaptor -id)
    if [ $? -ne 0 ]; then
        exit 1
    fi
fi

#=========================================================================================================
#  P O D   H A N D L I N G
if [ -n "$DEPLOY" ]; then
    ~/opentas_ft/single_vm_stuff/deploy_pods.sh --cm_adaptor_tag latest --cm_server_tag latest --withoutconfig

elif [ -n "$HALT" ]; then
    ~/opentas_ft/single_vm_stuff/deploy_pods.sh --delete 2

#=========================================================================================================
#  M E M F I L E   H A N D L I N G
elif [ -n "$MEMFILE_SUMMON" ]; then
    docker cp $id:/dev/shm/mem_files/$MEMFILE_TARGET .

elif [ -n "$MEMFILE_PUT" ]; then
    docker cp $MEMFILE_TARGET $id:/dev/shm/mem_files/$MEMFILE_TARGET

elif [ -n "$MEMFILE_LIST" ]; then
    docker exec $id ls /dev/shm/mem_files

elif [ -n "$MEMFILE_SHOW" ]; then
    docker cp $id:/dev/shm/mem_files/$MEMFILE_TARGET .
    chmod 744 $MEMFILE_TARGET
    hexdump -C $MEMFILE_TARGET
    rm $MEMFILE_TARGET

#=========================================================================================================
#  D S L   H A N D L I N G
elif [ -n "$DSL_SUMMON" ]; then
    docker cp $id:${CMPATH}/DSLs/$DSL_TARGET .

elif [ -n "$DSL_PUT" ]; then
    docker cp $DSL_TARGET $id:${CMPATH}/DSLs/$DSL_TARGET

elif [ -n "$DSL_LIST" ]; then
    docker exec $id ls ${CMPATH}/DSLs

#=========================================================================================================
#  D A T   H A N D L I N G
elif [ -n "$DAT_SUMMON" ]; then
    docker cp $id:${CMPATH}/DATs/$DAT_TARGET .

elif [ -n "$DAT_PUT" ]; then
    docker cp $DAT_TARGET $id:${CMPATH}/DATs/$DAT_TARGET

elif [ -n "$DAT_LIST" ]; then
    docker exec $id ls ${CMPATH}/DATs
fi

