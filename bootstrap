#!/usr/bin/env bash
DOTFILES_ROOT=$HOME/.dotfiles
GITHUB_USERNAME=tiborsimon
REPO_NAME=dotfiles
SSH_KEY=~/.ssh/id_rsa

#----------------------------------------------------------------------------------------
#  C O M M O N   F U N C T I O N S
#----------------------------------------------------------------------------------------

RESET=$(tput sgr0)

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)

BOLD=$(tput bold)

info () {
  printf "\r  [ ${BOLD}${LBLUE}..${RESET} ] $1\n"
}

user () {
  printf "\r  [ ${BOLD}${CYAN}??${RESET} ] $1\n"
}

success () {
  printf "\r  [ ${BOLD}${GREEN}OK${RESET} ] $1\n"
}

warning () {
  printf "\r  [ ${BOLD}${YELLOW}!!${RESET} ] $1\n"
}

fail () {
  printf "\r  [${BOLD}${RED}FAIL${RESET}] $1\n"
}

assert_path () {
  if [ "$(pwd)" == "$HOME/.dotfiles" ]; then
    fail "You could't run this script from your ${BOLD}.dotfiles${RESET} folder!"
    echo ''
    exit
  fi
}

assert_for_git () {
  if [ ! $(which git) ]; then
    fail 'Could not find git. You have to install it manually!'
    echo ''
    exit
  fi
}

add_key_to_ssh_agent () {
  info 'Adding SSH key to ssh-agent..'
  eval $(ssh-agent)>/dev/null
  ssh-add
  success 'SSH key added to ssh-agent.'
}

generate_ssh_key () {
  user 'What is your email address?' 
  read -e USER_EMAIL
  until ssh-keygen -t rsa -b 4096 -C "$USER_EMAIL" -f $SSH_KEY; do 
    fail 'key generation failed. try again..'
  done
  success 'SSH key generated.'
}


prepare_ssh_key () {
  info 'Looking for SSH key..'
  
  if [ -f $SSH_KEY ] && [ -f $SSH_KEY.pub ]; then 
    user 'SSH key is detected. Do you want to create a new one? [C]reate, [k]eep'
    read -n 1 action
    case "$action" in
    C ) info 'Generating SSH key..'
        generate_ssh_key
        ;;
    * ) success 'SSH key generation skipped. Existing key will be used.'
        ;;
    esac
  else
    user "SSH key ($SSH_KEY) cannot be found. Generating a new one.."
    generate_ssh_key
  fi
  add_key_to_ssh_agent
}

upload_key_to_github () {
  local github_result=0
  user 'How do you want to name the key?'
  read -e KEY_NAME
  until [ $github_result -eq 1 ]; do
    local output=$(curl -fsS -u "$GITHUB_USERNAME" --data "{\"title\":\"$KEY_NAME\",\"key\":\"$(cat $SSH_KEY.pub)\"}" https://api.github.com/user/keys)
    if echo $output | grep 'key is already in use'; then
      github_result=1
      success 'Key is already in use'
    elif echo $output | grep '"verified": true'; then
      github_result=1
      success "Key ($KEY_NAME) has been added successfully."
    elif echo $output | grep 'Bad credentials'; then
      fail 'Error during login: invalid username or password!'
      info 'Try again!'
    else
      fail 'A problem occured during the upload!'
      echo $output
    fi
  done
}

upload_key_to_github () {
  local github_result=0
  user 'How do you want to name the key?'
  read -e KEY_NAME
  until [ $github_result -eq 1 ]; do
    curl --silent -u "$GITHUB_USERNAME" --data "{\"title\":\"$KEY_NAME\",\"key\":\"$(cat $SSH_KEY.pub)\"}" https://api.github.com/user/keys > gh-result
    if grep -q 'key is already in use' gh-result; then
      github_result=1
      success 'Key is already in use. Rerun this script if you want to add a new one.'
    elif grep -q '"verified": true' gh-result; then
      github_result=1
      success "Key ($KEY_NAME) has been added successfully."
    elif grep -q 'Bad credentials' gh-result; then
      fail 'Error during login: invalid username or password!'
      info 'Try again!'
    else
      fail 'A problem occured during the upload!'
      cat gh-result
      info 'Try again!'
    fi
    rm gh-result
  done
}

add_ssh_key_to_github () {
  user 'Do you want to add the SSH key to your GitHub account? [Y]es [s]kip'
  read -n 1 action
  case "$action" in
  Y ) info "Uploading SSH key to $GITHUB_USERNAME's GitHub account.."
      upload_key_to_github
      ;;
  * ) info 'Skipped uploading SSH key to GitHub.'
      ;;
  esac
}

clone_via_git () {
  info 'Cloning dotfiles repository..'
  if git clone --depth 1 git@github.com:$GITHUB_USERNAME/$REPO_NAME $DOTFILES_ROOT; then
    success 'Dotfiles repository cloned.'
  else
    fail "Couldn't clone the repo. Make sure the repo link is correct and you have sufficient rights to access it."
  fi
}

clone_via_http () {
  info 'Cloning dotfiles repository..'
  if git clone  --depth 1 https://github.com/$GITHUB_USERNAME/$REPO_NAME $DOTFILES_ROOT; then
    success 'Dotfiles repository cloned.'
  else
    fail "Couldn't clone the repo. Make sure the repo link is correct and you have sufficient rights to access it."
  fi
}

#----------------------------------------------------------------------------------------
#  B O O T S T R A P   S C R I P T 
#----------------------------------------------------------------------------------------

echo ''
echo '---------------------------------------------------------------------------------'
echo "      T I B O R   S I M O N ' S   D O T F I L E   C O N F I G U R A T I O N"
echo '---------------------------------------------------------------------------------'
echo ''

assert_path

info 'Installing dotfiles system..'

assert_for_git

if [ -d "$DOTFILES_ROOT" ]; then
  user "$DOTFILES_ROOT folder already exist. [D]elete, [a]bort"
  read -n 1 action

  case "$action" in
  D ) success "Old $DOTFILES_ROOT folder deleted."
      rm -rf $DOTFILES_ROOT
      ;;
  * ) success 'Bootstrap script aborted.'
      echo ''
      exit
      ;;
  esac
fi

user 'Clone repo via [h]ttp or via [g]it (ssh key required)?'
read -n 1 action
case "$action" in
g ) success 'Repo will be cloned via git protocol.'
    prepare_ssh_key
    add_ssh_key_to_github
    clone_via_git
    ;;
* ) success 'Repo will be cloned via http protocol.'
    clone_via_http
    ;;
esac

info 'Running deploy script..'

cd $DOTFILES_ROOT
./deploy

success 'Bootstrap script has finished!'
echo ''

