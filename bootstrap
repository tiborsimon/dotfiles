#!/bin/sh
#
# This script will install the full configuration of the tiborsimon/dotfiles repo. 
# It will use a symlinked solution: it will symlink the configuration files located in 
# the .dotfiles folder's subfolders. With this approach, you will be able to separate
# the configurations from each others.
#
# You can clone the repo via https and ssh protocol. If you choose https, you wouldn't need
# your ssh key set up, but you will have to provide your GitHub credentials during every push.
# If you choose ssh as a cloning method, you are directed through an ssh key creatation process
# which contains an ssh key upload to GitHub too.
#
# To be able to use this file, you have to fill out the global variables below.
#
# Usage: issue the following command on your machine: sh <(curl -fsSL tiborsimon.io/dotfiles)

GITHUB_USERNAME=tiborsimon
REPO_NAME=dotfiles
SSH_KEY=~/.ssh/id_rsa

#----------------------------------------------------------------------------------------
#  C O M M O N   F U N C T I O N S
#----------------------------------------------------------------------------------------

RESET=$(tput sgr0)

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)

BOLD=$(tput bold)

info () {
  printf "\r  [ ${BOLD}${BLUE}..${RESET} ] $1\n"
}

user () {
  printf "\r  [ ${BOLD}${CYAN}??${RESET} ] $1\n"
}

success () {
  printf "\r  [ ${BOLD}${GREEN}OK${RESET} ] $1\n"
}

warning () {
  printf "\r  [ ${BOLD}${YELLOW}!!${RESET} ] $1\n"
}

fail () {
  printf "\r  [${BOLD}${RED}FAIL${RESET}] $1\n"
}

assert_path () {
  if [ "$(pwd)" == "$HOME/.dotfiles" ]; then
    fail "You could't run this script from your ${BOLD}.dotfiles${RESET} folder!"
    echo ''
    exit
  fi
}

assert_for_git () {
  if [ ! $(which git) ]; then
    fail 'Could not find git. You have to install it manually!'
    echo ''
    exit
  fi
}

add_key_to_ssh_agent () {
  info 'Adding SSH key to ssh-agent..'
  eval $(ssh-agent)>/dev/null
  ssh-add
  success 'SSH key added to ssh-agent.'
}

generate_ssh_key () {
  user 'What is your email address?' 
  read -e USER_EMAIL
  until ssh-keygen -t rsa -b 4096 -C "$USER_EMAIL" -f $SSH_KEY; do 
    fail 'key generation failed. try again..'
  done
  success 'SSH key generated.'
}

prepare_ssh_key () {
  info 'Looking for SSH key..'
  
  if [ -f $SSH_KEY ] && [ -f $SSH_KEY.pub ]; then 
    user_answered=0
    until [ $user_answered = 1 ]; do
      user "SSH key is detected. Do you want to create a new one? [${BOLD}${GREEN}C${RESET}]reate, [${BOLD}${GREEN}k${RESET}]eep"
      read -n 1 action
      case "$action" in
      C ) info 'Generating SSH key..'
          generate_ssh_key
          user_answered=1
          ;;
      k ) success 'SSH key generation skipped. Existing key will be used.'
          user_answered=1
          ;;
      * ) warning "Wrong answer! Type ${BOLD}${GREEN}C${RESET} or ${BOLD}${GREEN}k${RESET}."
          ;;
      esac
    done
  else
    user "SSH key ($SSH_KEY) cannot be found. Generating a new one.."
    generate_ssh_key
  fi
  add_key_to_ssh_agent
}

upload_key_to_github () {
  local github_result=0
  user 'How do you want to name the key?'
  read -e KEY_NAME
  until [ $github_result -eq 1 ]; do
    curl --silent -u "$GITHUB_USERNAME" --data "{\"title\":\"$KEY_NAME\",\"key\":\"$(cat $SSH_KEY.pub)\"}" https://api.github.com/user/keys > gh-result
    if grep -q 'key is already in use' gh-result; then
      github_result=1
      success 'Key is already in use. Rerun this script if you want to add a new one.'
    elif grep -q '"verified": true' gh-result; then
      github_result=1
      success "Key ($KEY_NAME) has been added successfully."
    elif grep -q 'Bad credentials' gh-result; then
      fail 'Error during login: invalid username or password!'
      info 'Try again!'
    else
      fail 'A problem occured during the upload!'
      cat gh-result
      info 'Try again!'
    fi
    rm gh-result
  done
}

upload_key_to_bitbucket () {
  local bitbucket_result=0
  user 'How do you want to name the key?'
  read -e KEY_NAME
  until [ $bitbucket_result -eq 1 ]; do
    curl --silent --data "{\"label\":\"$KEY_NAME\",\"key\":\"$(cat $SSH_KEY.pub)\"}" https://api.bitbucket.org/1.0/users/$GITHUB_USERNAME/ssh-keys > gh-result
    if grep -q 'key is already in use' gh-result; then
      echo gh-result
      bitbucket_result=1
      success 'Key is already in use. Rerun this script if you want to add a new one.'
    elif grep -q '"verified": true' gh-result; then
      echo gh-result
      bitbucket_result=1
      success "Key ($KEY_NAME) has been added successfully."
    elif grep -q 'Bad credentials' gh-result; then
      echo gh-result
      fail 'Error during login: invalid username or password!'
      info 'Try again!'
    else
      echo gh-result
      fail 'A problem occured during the upload!'
      cat gh-result
      info 'Try again!'
    fi
    rm gh-result
  done
}

upload_ssh_key () {
  user_answered=0
  until [ $user_answered = 1 ]; do
    user "Do you want to add the SSH key to your GitHub account? [${BOLD}${GREEN}Y${RESET}]es [${BOLD}${GREEN}s${RESET}]kip"
    read -n 1 action
    case "$action" in
    Y ) info "Uploading SSH key to $GITHUB_USERNAME's GitHub account.."
        upload_key_to_github
        user_answered=1
        ;;
    s ) info 'Skipped uploading SSH key to GitHub.'
        user_answered=1
        ;;
    * ) info "Wrong answer! Type ${BOLD}${GREEN}Y${RESET} or ${BOLD}${GREEN}s${RESET}."
        ;;
    esac
  done

  user_answered=0
  until [ $user_answered = 1 ]; do
    user "Do you want to add the SSH key to your BitBucket account? [${BOLD}${GREEN}Y${RESET}]es [${BOLD}${GREEN}s${RESET}]kip"
    read -n 1 action
    case "$action" in
    Y ) info "Uploading SSH key to $GITHUB_USERNAME's BitBucket account.."
        upload_key_to_bitbucket
        user_answered=1
        ;;
    s ) info 'Skipped uploading SSH key to BitBucket.'
        user_answered=1
        ;;
    * ) info "Wrong answer! Type ${BOLD}${GREEN}Y${RESET} or ${BOLD}${GREEN}s${RESET}."
        ;;
    esac
  done
}

clone_via_git () {
  info 'Cloning dotfiles repository..'
  if git clone --depth 1 git@github.com:$GITHUB_USERNAME/$REPO_NAME $HOME/.dotfiles; then
    success 'Dotfiles repository cloned.'
  else
    fail "Couldn't clone the repo. Make sure the repo link is correct and you have sufficient rights to access it."
    echo ''
    exit
  fi
}

clone_via_http () {
  info 'Cloning dotfiles repository..'
  if git clone  --depth 1 https://github.com/$GITHUB_USERNAME/$REPO_NAME $HOME/.dotfiles; then
    success 'Dotfiles repository cloned.'
  else
    fail "Couldn't clone the repo. Make sure the repo link is correct and you have sufficient rights to access it."
    echo ''
    exit
  fi
}

#----------------------------------------------------------------------------------------
#  B O O T S T R A P   S C R I P T 
#----------------------------------------------------------------------------------------

echo ''
echo '---------------------------------------------------------------------------------'
echo "      T I B O R   S I M O N ' S   D O T F I L E   C O N F I G U R A T I O N"
echo '---------------------------------------------------------------------------------'
echo ''

assert_path

info 'Installing dotfiles system..'

assert_for_git

user_answered=0
until [ $user_answered = 1 ]; do
  if [ -d "$HOME/.dotfiles" ]; then
    user "$HOME/.dotfiles folder already exist. [${BOLD}${GREEN}D${RESET}]elete, [${BOLD}${GREEN}a${RESET}]bort"
    read -n 1 action

    case "$action" in
    D ) success "Old $HOME/.dotfiles folder deleted."
        rm -rf $HOME/.dotfiles
        user_answered=1
        ;;
    a ) success 'Bootstrap script aborted.'
        echo ''
        exit
        ;;
    * ) warning "Wrong answer! Type ${BOLD}${GREEN}D${RESET} or ${BOLD}${GREEN}a${RESET}."
        ;;
    esac
  fi
done


user_answered=0
until [ $user_answered = 1 ]; do
  user "Clone repo via [${BOLD}${GREEN}h${RESET}]ttp or via [${BOLD}${GREEN}g${RESET}]it (ssh key required)?"
  read -n 1 action
  case "$action" in
  g ) success 'Repo will be cloned via git protocol.'
      prepare_ssh_key
      upload_ssh_key
      clone_via_git
      user_answered=1
      ;;
  h ) success 'Repo will be cloned via http protocol.'
      clone_via_http
      user_answered=1
      ;;
  * ) warning "Wrong answer. Type ${BOLD}${GREEN}h${RESET} or ${BOLD}${GREEN}g${RESET}."
      ;;
  esac
done

info 'Running deploy script..'

cd $HOME/.dotfiles
./deploy

success 'Bootstrap script has finished!'
echo ''

