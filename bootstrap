#!/bin/bash
#
# This script will install the full configuration of the tiborsimon/dotfiles repo. 
# It will use a symlinked solution: it will symlink the configuration files located in 
# the .dotfiles folder's subfolders. With this approach, you will be able to separate
# the configurations from each others.
#
# You can clone the repo via https and ssh protocol. If you choose https, you wouldn't need
# your ssh key set up, but you will have to provide your GitHub credentials during every push.
# If you choose ssh as a cloning method, you are directed through an ssh key creatation process
# which contains an ssh key upload to GitHub too.
#
# To be able to use this file, you have to fill out the global variables below.
#
# Usage: issue the following command on your machine: sh <(curl -fsSL tiborsimon.io/dotfiles)

GITHUB_USERNAME=tiborsimon
REPO_NAME=dotfiles
SSH_KEY=~/.ssh/id_rsa

source <(curl -fsSL https://raw.githubusercontent.com/tiborsimon/dotfiles/master/functions/commons)

#----------------------------------------------------------------------------------------
#  C O M M O N   F U N C T I O N S
#----------------------------------------------------------------------------------------

assert_path () {
    if [ "$(pwd)" = "$HOME/.dotfiles" ]; then
        fail "You could't run this script from your ${BoldWhite}.dotfiles${ResetColor} folder!"
        echo ''
        exit
    fi
}

assert_for_git () {
    if [ ! $(which git) ]; then
        fail 'Could not find git. You have to install it manually!'
        echo ''
        exit
    fi
}

add_key_to_ssh_agent () {
    info 'Adding SSH key to ssh-agent..'
    eval $(ssh-agent)>/dev/null
    ssh-add
    success 'SSH key added to ssh-agent.'
}

generate_ssh_key () {
    user 'What is your email address?' 
    read -e USER_EMAIL
    until ssh-keygen -t rsa -b 4096 -C "$USER_EMAIL" -f $SSH_KEY; do 
        fail 'key generation failed. try again..'
    done
    success 'SSH key generated.'
}

prepare_ssh_key () {
    info 'Looking for SSH key..'

    if [ -f $SSH_KEY ] && [ -f $SSH_KEY.pub ]; then
        while true; do
            user "SSH key is detected. Do you want to create a new one? [${BoldGreen}C${ResetColor}]reate, [${BoldGreen}k${ResetColor}]eep"
            read -n 1 action
            case "$action" in
                C ) info 'Generating SSH key..'
                    generate_ssh_key
                    break
                    ;;
                k ) success 'SSH key generation skipped. Existing key will be used.'
                    break
                    ;;
                * ) warning "Wrong answer! Type ${BoldGreen}C${ResetColor} or ${BoldGreen}k${ResetColor}."
                    ;;
            esac
        done
    else
        user "SSH key ($SSH_KEY) cannot be found. Generating a new one.."
        generate_ssh_key
    fi
    add_key_to_ssh_agent
}

upload_key_to_github () {
    user 'How do you want to name the key?'
    read -e KEY_NAME
    user 'Provide the two factor authentication app code:'
    read -e OTP
    while true; do
        curl --silent -u "$GITHUB_USERNAME" -H "X-GitHub-OTP: $OTP" --data "{\"title\":\"$KEY_NAME\",\"key\":\"$(cat $SSH_KEY.pub)\"}" https://api.github.com/user/keys > gh-result
        if grep -q 'key is already in use' gh-result; then
            success 'Key is already in use. Rerun this script if you want to add a new one.'
            rm gh-result
            break
        elif grep -q '"verified": true' gh-result; then
            success "Key ($KEY_NAME) has been added successfully."
            rm gh-result
            break
        elif grep -q 'Bad credentials' gh-result; then
            fail 'Error during login: invalid username or password!'
            info 'Try again!'
        else
            fail 'A problem occured during uploading the key..'
            cat gh-result
            info 'Make sure you have internet connectoion.'
            break
        fi
    done
}

upload_ssh_key () {
    while true; do
        user "Do you want to add the SSH key to your GitHub account? [${BoldGreen}Y${ResetColor}]es [${BoldGreen}s${ResetColor}]kip"
        read -n 1 action
        case "$action" in
            Y ) info "Uploading SSH key to $GITHUB_USERNAME's GitHub account.."
                upload_key_to_github
                break
                ;;
            s ) info 'Skipped uploading SSH key to GitHub.'
                break
                ;;
            * ) info "Wrong answer! Type ${BoldGreen}Y${ResetColor} or ${BoldGreen}s${ResetColor}."
                ;;
        esac
    done
}

clone_via_git () {
    info 'Cloning dotfiles repository..'
    if git clone --depth 1 git@github.com:$GITHUB_USERNAME/$REPO_NAME $HOME/.dotfiles; then
        success 'Dotfiles repository cloned.'
    else
        fail "Couldn't clone the repo. Make sure the repo link is correct and you have sufficient rights to access it."
        echo ''
        exit
    fi
}

clone_via_http () {
    info 'Cloning dotfiles repository..'
    if git clone  --depth 1 https://github.com/$GITHUB_USERNAME/$REPO_NAME $HOME/.dotfiles; then
        success 'Dotfiles repository cloned.'
    else
        fail "Couldn't clone the repo. Make sure the repo link is correct and you have sufficient rights to access it."
        echo ''
        exit
    fi
}

#----------------------------------------------------------------------------------------
#  B O O T S T R A P   S C R I P T 
#----------------------------------------------------------------------------------------

echo ''
echo '---------------------------------------------------------------------------------'
echo "      T I B O R   S I M O N ' S   D O T F I L E   C O N F I G U R A T I O N"
echo '---------------------------------------------------------------------------------'
echo ''

assert_path

info 'Installing dotfiles system..'

assert_for_git

if [ -d "$HOME/.dotfiles" ]; then
    while true; do
        user "$HOME/.dotfiles folder already exist. [${BoldGreen}D${ResetColor}]elete, [${BoldGreen}a${ResetColor}]bort"
        read -n 1 action

        case "$action" in
            D ) success "Old $HOME/.dotfiles folder deleted."
                rm -rf $HOME/.dotfiles
                break
                ;;
            a ) success 'Bootstrap script aborted.'
                echo ''
                exit
                ;;
            * ) warning "Wrong answer! Type ${BoldGreen}D${ResetColor} or ${BoldGreen}a${ResetColor}."
                ;;
        esac
    done
fi

while true; do
    user "Clone repo via [${BoldGreen}h${ResetColor}]ttp or via [${BoldGreen}g${ResetColor}]it (ssh key required)?"
    read -n 1 action
    case "$action" in
        g ) success 'Repo will be cloned via git protocol.'
            prepare_ssh_key
            upload_ssh_key
            clone_via_git
            break
            ;;
        h ) success 'Repo will be cloned via http protocol.'
            clone_via_http
            break
            ;;
        * ) warning "Wrong answer. Type ${BoldGreen}h${ResetColor} or ${BoldGreen}g${ResetColor}."
            ;;
    esac
done

info 'Running deploy script..'

cd $HOME/.dotfiles
./deploy

success 'Bootstrap script has finished!'
echo ''
