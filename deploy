#!/bin/bash
#
# This script will install the full configuration of the tiborsimon/dotfiles repo. 
# It will use a symlinked solution: it will symlink the configuration files located in 
# the .dotfiles folder's subfolders. With this approach, you will be able to separate
# the configurations from each others.
#
# This script can be used if you already have cloned the dotfiles repo, but you want to update
# to the latest version.
#
# To be able to use this file, you have to fill out the global variables below.
#
# Usage: run the script from the ~/.dotfiles folder.

LINUX_PACKAGE_MANAGER=yum

#set -e
source functions/commons

#----------------------------------------------------------------------------------------
#  C O M M O N   F U N C T I O N S
#----------------------------------------------------------------------------------------

is_osx () {
    if [ $(uname -s) = 'Darwin' ]
    then
        return 0 
    else
        return 1
    fi
}

install_dotfiles () {
    info 'Installing dotfiles..'
    local overwrite_all=false backup_all=false skip_all=false
    for src in $(find -H "$HOME/.dotfiles" -maxdepth 2 -name '*.symlink' -not -path '*.git*'); do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

install_mc () {
    info 'Installing mc config..'
    if [ ! -d "$HOME/.config" ]; then
        mkdir $HOME/.config
    fi
    local overwrite_all=false backup_all=false skip_all=false
    link_file "$HOME/.dotfiles/mc" "$HOME/.config/mc"
    success 'Mc config installed'
}

install_emacs () {
    info 'Installing emacs config..'
    local overwrite_all=false backup_all=false skip_all=false
    link_file "$HOME/.dotfiles/emacs" "$HOME/.emacs.d"
    success 'Emacs config installed'
}

install_vimplug () {
    info 'Installing VimPlug..'
    curl -sSfLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    success 'VimPlug installed!'
}

#----------------------------------------------------------------------------------------
#  O S X   R E L A T E D   F U N C T I O N S
#----------------------------------------------------------------------------------------

set_up_osx () {
    info 'Configuring OSX..'
    source osx/set-defaults.sh
    success 'OSX configured!'
}

install_homebrew () {
    if test ! $(which brew); then
        info 'Installing Homebrew..'
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    else
        success 'Homebrew is installed!'
    fi
}

update_homebrew () {
    while true; do
        user "Do you want to update Homebrew?  [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
        read -n 1 action
        case "$action" in
            y ) info 'Updating Homebrew..'
                if brew update > brew-update.log; then
                    success 'Homebrew is up-to-date!'
                else
                    fail 'Error during Homebrew update!'
                fi
                break
                ;;
            s ) success 'Skipped..'
                break
                ;;
            * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
                ;;
        esac
    done
}

excute_brewfile () {
    while true; do
        user "Do you want to execute the Brewfile to install all your programs?  [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
        read -n 1 action

        case "$action" in
            y ) info 'Executing Brewfile..'
                brew bundle -v  --file=osx/Brewfile > brew-install.log
                success 'Brewfile executed. All apps are installed.'
                break
                ;;
            s ) success 'Skipped..'
                break
                ;;
            * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
                ;;
        esac
    done
}

#----------------------------------------------------------------------------------------
#  L I N U X   R E L A T E D   F U N C T I O N S
#----------------------------------------------------------------------------------------

excute_linux_packages_file () {
    while true; do
        user "Do you want to install software packages?  [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
        read -n 1 action
        case "$action" in
            y ) user 'What is the package manager for this platform?'
                read -e LINUX_PACKAGE_MANAGER
                for app in $(cat $HOME/.dotfiles/linux/packages.txt); do 
                    info "Installing $app.."
                    if sudo $LINUX_PACKAGE_MANAGER install -y $app>pof 2>&1; then
                        success "$app installed."
                    else
                        warning "$app installation failed! Error: \n$(cat pof)"
                    fi
                    rm -f pof
                done
                success 'Done'
                break
                ;;
            s ) success 'Skipped..'
                break
                ;;
            * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
                ;;
        esac
    done
}

#----------------------------------------------------------------------------------------
#  F U N C T I O N S   C A L L S
#----------------------------------------------------------------------------------------

if is_osx; then
    info "Installing OS X related config"
    install_dotfiles
    install_emacs
    set_up_osx
    install_homebrew
    update_homebrew
    excute_brewfile
    install_mc
    install_vimplug
else
    info "Installing Linux related config"
    install_dotfiles
    install_emacs
    excute_linux_packages_file
    install_mc
    install_vimplug
fi

success 'Dotfiles has been deployed.'
