#!/bin/bash
#
# This script will install the full configuration of the tiborsimon/dotfiles repo.
# It will use a symlinked solution: it will symlink the configuration files located in
# the .dotfiles folder's subfolders. With this approach, you will be able to separate
# the configurations from each others.
#
# This script can be used if you already have cloned the dotfiles repo, but you want to update
# to the latest version.
#
# To be able to use this file, you have to fill out the global variables below.
#
# Usage: run the script from the ~/.dotfiles folder.

LINUX_PACKAGE_MANAGER=apt-get

#set -e
source functions/commons

#----------------------------------------------------------------------------------------
#  F U N C T I O N S
#----------------------------------------------------------------------------------------

install_dotfiles () {
  info 'Installing dotfiles..'
  local overwrite_all=false backup_all=false skip_all=false
  for src in $(find -H "$HOME/.dotfiles" -maxdepth 2 -name '*.symlink' -not -path '*.git*'); do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_python () {
  while true; do
    user "Do you want setup the Python environment? [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
    read -n 1 action
    case "$action" in
      y ) info 'Installing Python environment..'
        info 'Installing pip and python dev tools..'
        sudo apt-get install python-pip python-dev python-setuptools
        success 'pip and python dev tools installed!'
        info 'Installing pip3..'
        sudo apt-get install python3-pip
        success 'pip3 installed!'
        info 'Upgrading pip and pip3..'
        pip2 install --user --upgrade pip
        pip3 install --user --upgrade pip
        success 'pip and pip3 upgraded!'
        info 'Installing necessary packages..'
        pip2 install --user setuptools
        pip3 install --user setuptools
        pip2 install --user wheel virtualenv bpython projects
        pip3 install --user wheel twine virtualenv bpython numpy scipy matplotlib ipython jupyter pandas sympy nose
        success 'Packages installed!'
        break
        ;;
      s ) success 'Skipped..'
        break
        ;;
      * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
        ;;
    esac
  done
}

install_mc () {
  while true; do
    user "Do you want deploy MC configuration? [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
    read -n 1 action
    case "$action" in
      y ) info 'Deploying MC configuration..'
        if [ ! -d "$HOME/.config" ]; then
          mkdir $HOME/.config
        fi
        local overwrite_all=false backup_all=false skip_all=false
        link_file "$HOME/.dotfiles/mc" "$HOME/.config/mc"
        success 'Mc config installed!'
        break
        ;;
      s ) success 'Skipped..'
        break
        ;;
      * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
        ;;
    esac
  done
}

install_kicad () {
  while true; do
    user "Do you want to KiCad? [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
    read -n 1 action
    case "$action" in
      y ) info 'Installing KiCad..'
        sudo add-apt-repository --yes ppa:js-reynaud/kicad-4
        sudo apt update
        sudo apt install kicad kicad-libraries
        success 'KiCad installed!'
        break
        ;;
      s ) success 'Skipped..'
        break
        ;;
      * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
        ;;
    esac
  done
}

install_vimplug () {
  while true; do
    user "Do you want to install VimPlug? [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
    read -n 1 action
    case "$action" in
      y ) info "Installing VimPlug.."
        curl -sSfLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        success 'VimPlug installed!'
        break
        ;;
      s ) success 'Skipped..'
        break
        ;;
      * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
        ;;
    esac
  done
}

install_node_js () {
  while true; do
    user "Do you want to install Node.js and the essential npm tools? [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
    read -n 1 action
    case "$action" in
      y ) info "Installing Node.js and essential tools with it.."
        which node > /dev/null
        if [[ $? != 0 ]]; then
          curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
          sudo apt-get install -y nodejs
          success 'Node.js installed!'
          info 'Installing global Node.js packages..'
          sudo npm install --silent -g local-web-server
          info 'Global Node.js packages installed!'
        else
          warning 'Node.js was already installed.. Nothing to do.'
        fi
        break
        ;;
      s ) success 'Skipped..'
        break
        ;;
      * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
        ;;
    esac
  done
}

clone_essential_projects () {
  while true; do
    user "Do you want to clone the essential repositories?  [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
    read -n 1 action
    case "$action" in
      y ) info 'Cloning essential repositories..'
        if [ ! -d ~/projects ]; then
          mkdir ~/projects
        fi
        if [ ! -d ~/projects/notebook ]; then
          git clone --depth 1 git@github.com:tiborsimon/notebook.git ~/projects/notebook
        fi
        if [ ! -d ~/projects/worklog ]; then
          git clone --depth 1 git@github.com:tiborsimon/worklog.git ~/projects/worklog
        fi
        if [ ! -d ~/projects/site ]; then
          git clone --depth 1 git@github.com:tiborsimon/tiborsimon.io-core.git ~/projects/site
        fi
        success 'Essential repositories cloned.'
        break
        ;;
      s ) success 'Skipped..'
        break
        ;;
      * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
        ;;
    esac
  done
}

excute_linux_packages_file () {
  while true; do
    user "Do you want to install software packages?  [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
    read -n 1 action
    case "$action" in
      y ) user 'What is the package manager for this platform?'
        read -e LINUX_PACKAGE_MANAGER
        for app in $(cat $HOME/.dotfiles/linux/packages.txt); do
          info "Installing $app.."
          if sudo $LINUX_PACKAGE_MANAGER install -y $app>pof 2>&1; then
            success "$app installed."
          else
            warning "$app installation failed! Error: \n$(cat pof)"
          fi
          rm -f pof
        done
        success 'Done'
        break
        ;;
      s ) success 'Skipped..'
        break
        ;;
      * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
        ;;
    esac
  done
}

deploy_xorg_config_files () {
  while true; do
    user "Do you want to deploy the Xorg configuration files? [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
    read -n 1 action
    case "$action" in
      y ) info "Deploying xorg configuration files."
        test -d /etc/X11/xorg.conf.d || sudo mkdir /etc/X11/xorg.conf.d
        sudo ln -s ~/.dotfiles/xorg/20-intel.conf /etc/X11/xorg.conf.d/20-intel.conf
        sudo ln -s ~/.dotfiles/xorg/50-synaptic.conf /etc/X11/xorg.conf.d/50-synaptic.conf
        success "Xorg configuration files deployed."
        break
        ;;
      s ) success 'Skipped..'
        break
        ;;
      * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
        ;;
    esac
  done
}

install_emacs () {
  while true; do
    user "Do you want to install emacs and its configuration? [${BoldGreen}y${ResetColor}]es, [${BoldGreen}s${ResetColor}]kip"
    read -n 1 action
    case "$action" in
      y ) info "Installing emacs and its configuration.."
        brew install emacs --HEAD --use-git-head --with-cocoa --with-gnutls --with-rsvg --with-imagemagick --with-ns
        brew linkapps emacs
        success 'Emacs installed'
        info 'Installing emacs config..'
        local overwrite_all=false backup_all=false skip_all=false
        link_file "$HOME/.dotfiles/emacs" "$HOME/.emacs.d"
        success 'Emacs config installed'
        break
        ;;
      s ) success 'Skipped..'
        break
        ;;
      * ) warning "Wrong answer! Type ${BoldGreen}y${ResetColor} or ${BoldGreen}s${ResetColor}."
        ;;
    esac
  done
}

#----------------------------------------------------------------------------------------
#  F U N C T I O N S   C A L L S
#----------------------------------------------------------------------------------------

info "Installing Linux related config"
install_dotfiles
excute_linux_packages_file
install_python
install_node_js
install_mc
install_emacs
install_vimplug
install_kicad
deploy_xorg_config_files
success 'Dotfiles has been deployed.'
